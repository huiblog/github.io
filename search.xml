<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[oracle 通过存储过程实现动态行转列]]></title>
    <url>%2F2019%2F11%2F02%2Foracle%E9%80%9A%E8%BF%87%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%A1%8C%E8%BD%AC%E5%88%97%2F</url>
    <content type="text"><![CDATA[一、 事件经过最近在做业务的时候，有个需求，是需要将表中的数据按照日期为列，统计当月每天任务完成数量，不能通过代码完成，只能写视图。 数据库表中的数据如下： 姓名 日期 小明 2019-10-02 小王 2019-10-21 小李 2019-10-30 小明 2019-10-22 要求的数据结构如下： 姓名 10月1 10月2 10月3 …… 小明 2 3 6 …… 小王 2 4 7 …… 二、难点要实现这个业务，有三点是比较困难的： 1.要查询出部门下所有员工的任务完成情况，没有任务的统计为0， 表中的数据只有完成任务的人员记录，所以通过group by 是不能得到所有人员的记录的 2.需要获得当月全部日期的数据，当天没有数据的也是记为0，但是跟上边的情况类似，某一天如果没有数据，需要自己构造出数据。 3.以日期作为列，每个月的天数是不定的，所以列数也是不确定的。 三、解决思路1. 解决人员问题这个没啥说的，既然是要所有人员的记录，那么就以人员表为主表去进行关联业务数据表 2. 解决行转列通过人员表与业务表去关联，能获取到有记录的数据，但是没有记录的那些日期怎么办？如何动态的加载列？这个问题考虑了很久。后来想把问题首先进行分解，如果只是统计一天的数据该怎么统计。我看网上的做法是通过decode 函数外加聚合函数去进行行转列。伪sql 如下 1select name,count(decode(date,&apos;2019-10-30&apos;),1,null) as &apos;2019-10-30&apos; from *** group by ... 解释一下，date 是表中的日期字段，如果日期字段等于’2019-10-30’ 那么就是1，否则是null,再通过count聚合函数进行统计。也就统计出了’2019-10-30’ 这一天的数据。 3. 解决全部日期的问题解决了一天的数据，那么就是要构造出这个月所有日期的列，显然首先要获取到当前月的所有日期，通过查找函数，找到了oracle自带的函数，获取到了。完整的sql如下： 1234SELECT TO_CHAR(TRUNC(SYSDATE,&apos;MM&apos;)+ROWNUM-1,&apos;yyyy-MM-DD&apos;) as local_date FROM dual connect by ROWNUM&lt;=to_char(last_day(SYSDATE),&apos;dd&apos;) 得到了结果： …… 4.解决全部日期的行转列获取到了当月所有日期，那么怎么使用。通过上面的sql一列一列构造每天的日期列显然是不现实的，既然是拼接，那么就可以通过函数或存储过程的循环，动态的从上面的日期数据中获取日期，然后构造counth函数进行拼接啊，想到这里，感觉有点眉目了。 4.游标思路是有了，但是上面查询出来的日期数据该怎么用，怎样放进loop循环中。我查找oracle 中有没有存储查询结果的东西，最后发现了游标这个东西。官方解释如下： 12游标的使用可以让用户想操作数组一样操作查询出来的数据集，实际上，它提供了一种从集合性质的结果中提取单挑记录的手段 游标分为好多种，这里就不详细说明了，用法就是定义一个游标，类似定义存储过程中的变量，然后定义一个变量，去接收游标中的数据，游标中存储的是已经查询好的结果集，然后在loop 中去取，每次循环会依次取游标中的数据，相当于迭代器中的next()方法。 123456789--定义游标CURSOR cursor_date IS SELECT TO_CHAR(TRUNC(SYSDATE,&apos;MM&apos;)+ROWNUM-1,&apos;yyyy-MM-DD&apos;) as local_date FROM dual connect by ROWNUM&lt;=to_char(last_day(SYSDATE),&apos;dd&apos;) ;--使用游标 v_data 接收游标中的遍历的元素...... for v_data in cursor_date LOOP ...... 离成功只差一步了，就剩拼接sql 了。 定义了存储过程、定义变量、游标、然后就开始赋值。比较坑的是，拼接sql的时候，sql本身是用单引号引起来的，但是有的查询条件也是单引号的 例如 sql:= ‘select …… from student where name = ‘小明’ ‘ 这时候要使用 || 进行字符串连接，而且 值得注意的是，在拼接sql时，当遇到sql中经常使用的单引号时，解释器会认为出了问题；需要使用2个单引号’’来代替单引号’也就是说需要写成如下结果：sql:= ‘select …… from student where name = ‘||’’’小明’’’||’ 调试了几下，大功告成：完整的sql 如下,主要展示存储过程、游标等的写法和用法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849--定义存储过程CREATE OR REPLACEPROCEDURE date_event_selectAS--定义变量，拼接sqlv_sql VARCHAR2(4000);--定义游标CURSOR cursor_date IS SELECT TO_CHAR(TRUNC(SYSDATE,&apos;MM&apos;)+ROWNUM-1,&apos;yyyy-MM-DD&apos;) as local_date FROM dual connect by ROWNUM&lt;=to_char(last_day(SYSDATE),&apos;dd&apos;) ;-- 存储过程方法体BEGIN v_sql := &apos;select b.depid, b.deptname,b.areaid as areaid, b.subname&apos;; --循环体 for v_data in cursor_date --拼接列 LOOP v_sql := v_sql || &apos;,COUNT(DECODE(b.DAY,&apos;&apos;&apos;||v_data.local_date||&apos;&apos;&apos;,1,NULL)) as &apos;||&apos;&quot;&apos; || v_data.local_date || &apos;&quot;&apos;; END LOOP;v_sql := v_sql || &apos;from (SELECT dept.id AS depid, dept.DEPARTMENTNAME AS deptname, a.local_date AS day, dept.SUBCOMPANYID1 as areaid, sub.subcompanyname as subnameFROM HRMDEPARTMENT dept LEFT JOIN ( SELECT evdept.DEPARTMENT_ID AS depid, ev.create_date AS local_date FROM UF_EVENT_DEPARTMENT evdept LEFT JOIN UF_EVENT_REQUEST ev ON ev.requestid = evdept.requestid where ev.CURRENT_NODE_TYPE_ID = 3 ) a ON a.depid = dept.ID LEFT JOIN HRMDEPARTMENTDEFINED deptdef ON deptdef.DEPTID = dept.id LEFT JOIN hrmsubcompany sub on sub.id = dept.SUBCOMPANYID1WHERE deptdef.GRID = &apos;||&apos;&apos;&apos;bm&apos;&apos;&apos;||&apos;) bGROUP BY deptname,depid,areaid,subname&apos; ; DBMS_OUTPUT.PUT_LINE(v_sql);--创建视图 v_sql := &apos;CREATE OR REPLACE VIEW date_event_view AS &apos;|| v_sql; --立即执行 EXECUTE IMMEDIATE v_sql;END; 5. 创建定时任务上面的存储过程创建了一个视图,存储过程是当时创建的时候执行了一次，也就是时候视图中的数据只是当月的数据，那么下到下个月的时候还得执行以下存储过程，所以就必须通过创建定时任务去定时的执行存储过程。 12345678910111213141516--创建一个定时任务，每天执行一次Declare i Integer;--下面的表达式中 i 是任务编号 第二个参数是存储过程名称，第三个参数是执行时间，第四个参数是间隔时间，间隔时间有的表达式可以自己根据需求构造 Begin dbms_job.submit(i,&apos;DATE_EVENT_SELECT;&apos;,Sysdate,&apos;TRUNC(SYSDATE + 1)&apos;);end;-- 执行Declare job_num Integer;Begin -- 查找计划号 Select t.JOB Into job_num From User_Jobs t ; -- 运行制定的执行计划 dbms_job.run(job_num);end; 6.定时任务常用的定时任务命令1234567--查询生成的job idselect job,broken,what,interval,t.* from user_jobs t;--删除任务begin dbms_job.remove(任务编号);end; 三、总结与思考其实看下来，主要问题是就是获取当月日期的问题以sql 循环拼接的问题。这方面主要还是对于oracle 的一下常用函数不熟悉所致。还有就是遇到问题还是需要冷静分析，当开始面对这个问题的时候，觉得太难实现了，心理有抵触情绪，其实仔细的分析问题，将问题进行分解，一块一块解决，就会柳暗花明。特此记录一下问题的解决过程。]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[太阳和野花]]></title>
    <url>%2F2019%2F09%2F15%2F%E8%8D%89%E5%8E%9F%2F</url>
    <content type="text"><![CDATA[蔚蓝的天空，白色的云朵，绿油油的山坡 悠闲吃草的马儿 草在结它的种子，风在摇它的叶子![shuxialaoniu]https://imgchr.com/i/KLCdns) 依山傍水，乘凉的老牛 勤劳的小蜜蜂]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMq学习（二）RabbitMQ的消息确认机制]]></title>
    <url>%2F2019%2F09%2F15%2FRabbitMq%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89RabbitMQ%E7%9A%84%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[一. 为什么有消息确认机制 在RabbitMq中，一个消息从产生到最终的消息接受，中间大致会有三个环节，首先是消息到达交换机、然后是消息通过交换机到达队列，最后消费者消费绑定的队列消息。 但是在这个过程中，如果出现网络或者系统的异常，就会导致消息不能被正常消费。如果不能正常消费消息，会造成两方面的问题。 1.1 在服务端消息到达队列，但是没有消费者去消费，就会造成消息积压，被积压的消息会存入缓存，直到有消费者进行消费。如果一直没有消费者进行消费，那么就会直接将内存占满，影响服务器性能。 1.2 消费端一个消息一旦被消费后，那么就会从队列删除。如果说消息已经到达消费者，但是消费者处理消息之前系统出现了异常，那么就相当于这条消息丢失了，是个很大的问题。 所以RabbitMq才会出现消息确认机制。对应的也是服务端客客户端两个方面解决 二、 怎么使用消息确认机制2.1 消息发送确认发送的确认也是分为两个步骤：到交换机的确认 ConfirmCallback 和到队列的确认 ReturnCallback ​ 这些确认机制默认都是不开启的，在SpringBoot 项目中，我们可以在配置文件中开启： 12spring.rabbitmq.publisher-confirms = truespring.rabbitmq.publisher-returns = true 或者 在配置连接工厂的时候开启： 123456789101112@Bean public ConnectionFactory connectionFactory() &#123; CachingConnectionFactory connectionFactory = new CachingConnectionFactory(host,port); connectionFactory.setUsername(username); connectionFactory.setPassword(password); connectionFactory.setVirtualHost(&quot;/&quot;); //开启到交换机的确认 connectionFactory.setPublisherConfirms(true); //开启到队列的确认 connectionFactory.setPublisherReturns(true); return connectionFactory; &#125; 在代码中实现 RabbitTemplate.ConfirmCallback 接口，如果消息被交换机正常接受，就会回调confirm 方法，参数的含义通过代码可以知晓。 实现 RabbitTemplate.ReturnCallback 接口，如果消息不能被发送到队列，就会调用ReturnedMessage 方法。 注意：一个是接收成功调用，一个是接收失败调用 12345678910111213141516171819202122232425262728293031323334353637383940@Componentpublic class ASender implements RabbitTemplate.ReturnCallback,RabbitTemplate.ConfirmCallback &#123; private final Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private RabbitTemplate rabbitTemplate; /** * 回调 */ @Override public void confirm(CorrelationData correlationData, boolean ack, String cause) &#123; logger.info(&quot; 回调id:&quot; + correlationData); if (ack) &#123; logger.info(&quot;消息成功消费&quot;); &#125; else &#123; logger.info(&quot;消息消费失败:&quot; + cause); &#125; &#125; @Override public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) &#123; logger.info(&quot;消息内容:&#123;&#125;&quot;, new String(message.getBody())); logger.info(&quot;回复文本:&#123;&#125;,回复代码：&#123;&#125;&quot;, replyText, replyCode); logger.info(&quot;交换器名称:&#123;&#125;,路由键：&#123;&#125;&quot;, exchange, routingKey); &#125; @PostConstruct public void init()&#123; rabbitTemplate.setReturnCallback(this); rabbitTemplate.setConfirmCallback(this); &#125; public void sendMsg(String content) &#123; CorrelationData correlationId = new CorrelationData(UUID.randomUUID().toString()); rabbitTemplate.convertAndSend(EXCHANGE_C, &quot;aa.apple.big&quot;, content, correlationId); &#125;&#125; 2.2 消息接受确认 消费端消息通过 ACK 确认是否被正确接收，每个 Message 都要被确认（acknowledged），可以手动去 ACK 或自动 ACK ACK 确认模式分为三种： AcknowledgeMode.NONE：自动确认 AcknowledgeMode.AUTO：根据情况确认 AcknowledgeMode.MANUAL：手动确认 默认是自动确认，开启手动确认的方式也是两种方式： 配置文件配置： 123456789101112131415spring: rabbitmq: listener: simple: acknowledge-mode: manual 另一种是在RabbitListenerContainerFactory配置：@Beanpublic RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123; SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setConnectionFactory(connectionFactory); factory.setMessageConverter(new Jackson2JsonMessageConverter()); factory.setAcknowledgeMode(AcknowledgeMode.MANUAL); //开启手动 ack return factory;&#125; 123456789101112在客户端接受消息：@RabbitHandlerpublic void processMessage2(String message, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) &#123; System.out.println(message); try &#123; channel.basicAck(tag, false); // 确认消息 logger.info(&quot;消费者成功确认&quot; + message); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;&#125;确认 basicAck 参数解释： deliveryTag（唯一标识 ID）：当一个消费者向 RabbitMQ 注册后，会建立起一个 Channel ，RabbitMQ 会用 basic.deliver 方法向消费者推送消息，这个方法携带了一个 delivery tag， 它代表了 RabbitMQ 向该 Channel 投递的这条消息的唯一标识 ID，是一个单调递增的正整数，delivery tag 的范围仅限于 Channel multiple：为了减少网络流量，手动确认可以被批处理，当该参数为 true 时，则可以一次性确认 delivery_tag 小于等于传入值的所有消息 https://www.jianshu.com/p/2c5eebfd0e95 Demo: https://github.com/zhuanzhiBUG/springboot-rabbitmq.git]]></content>
      <tags>
        <tag>RabbitMq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我是如何在面试别人Spring事务时“套路”对方的]]></title>
    <url>%2F2019%2F09%2F14%2F%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8%E9%9D%A2%E8%AF%95%E5%88%AB%E4%BA%BASpring%E4%BA%8B%E5%8A%A1%E6%97%B6%E2%80%9C%E5%A5%97%E8%B7%AF%E2%80%9D%E5%AF%B9%E6%96%B9%E7%9A%84%2F</url>
    <content type="text"><![CDATA[【转载】文章地址：https://www.cnblogs.com/lixinjie/p/a-interver-about-spring-tx.html]]></content>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMq学习（一）Exchange的四种类型和属性]]></title>
    <url>%2F2019%2F09%2F14%2FRabbitMq%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89Exchange%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[一、什么是Exchange首先我们要了解到，RabbitMQ 是 AMQP（高级消息队列协议）的标准实现： 从 AMQP 协议可以看出，Queue、Exchange 和 Binding 构成了 AMQP 协议的核心 Producer：消息生产者，即投递消息的程序。 Broker：消息队列服务器实体。 Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。 Binding：绑定，它的作用就是把 Exchange 和 Queue 按照路由规则绑定起来。 Queue：消息队列载体，每个消息都会被投入到一个或多个队列。 Consumer：消息消费者，即接受消息的程序。 二、Exchange的作用Exchange的主要作用还是为了解耦。 AMQP 协议中的核心思想就是生产者和消费者的解耦，生产者不直接将消息投递给队列，而是将消息投递给Exchange，然后Exchange根据相应的路由规则投递给队列，最后队列将消息投递到消费者。 举个生活中的例子，不是很恰当，但大概意思就是这样。将报纸、投递站、投递员、订阅报纸的用户分别看做生产者、exchange、队列以及消费者。 报纸印刷后，会分发到投递站，投递站相当于exchange，会指定分发规则，例如，这一片区的报纸分给某个投递员，投递员拿到这些报纸后，对订阅了该报纸的这一片区的用户进行投递。 当然这个队则有多种，例如将区域看做一个规则、将报纸种类看做规则、或者区域加种类混合规则。下面就详细介绍exchange的类型。 三、Exchange的类型3.1 Fanout Exchange这是最简单的一种交换器，首先要知道一个概念-banding。banding是将exchange和队列绑定的一种队则，java中万物皆对象，所以这个绑定也看做一个对象。 banding中还有个路由键的概念。就是即使交换机与队列进行了绑定，但是在某些场景下，我们不希望与交换机绑定的队列都能收到消息。所以就可以去指定一个路由键。 在进行绑定的时候去指定路由键，在发送消息的时候指定Exchange、指定路由键，才可以正确的将消息发送到队列上。 Fanout Exchange 比较特殊 会忽略路由键的设置，直接将 Message 广播到所有绑定的 Queue 中。3.2 Direct Exchange Direct Exchange 是RabbitMq的模式模式，将Exchange和队列绑定的时候，需要指定路由键，并且在发消息的时候也需要指定路由键，并且路由键必须要完全一致。 ![img](https://img2018.cnblogs.com/blog/1007019/201907/1007019-20190714202422998-851186846.png)例如指定了路由键是green，那么只有与exchange绑定并且路由键为green的队列才会收到消息。 3.3 Topic Exchange与Direct Exchange基本相同，唯一区别在于路由键。Topic exchange 的路由键可以去进行模糊匹配。 \* 表示一个单词的模糊匹配 例如，路由键是 *.apple.big 则表示第一个单词可以是任意的，只要后边单词完全匹配，就可以。 \# 表示完全模糊匹配。例如 路由键是 #.little ，那么 发送消息的路由键可以是 green,apple,little,也就是说前面的单词是任意的。四、Exchange的使用多说无益，直接撸代码。 就用topic 做演示，其他的模式基本一样。 首先设定一个路由键1public static final String TOPIC_C = &quot;red.*.*&quot;; 配置一个topicExchange 123public TopicExchange topicExchange() &#123; return new TopicExchange(EXCHANGE_C);&#125; 配置一个队列1234@Bean public Queue queueC() &#123; return new Queue(QUEUE_C, false); //队列持久 &#125; 第一个参数拜师队列名称，第二个参数表示是否持久化 配置bangding 12345@Beanpublic Binding bindingC() &#123; return BindingBuilder.bind(queueC()).to(topicExchange()).with(TOPIS_C); &#125; 第一个参数是Exchange名称，第二个参数是路由键，第三个参数是内容，第四个参数是唯一性id 如果是 Fanout Exchange 那么就不用指定路由键传参为null， 如果是 Direct Exchange，那么路由键就要与指定的路由键完全匹配。 发送消息代码 12345public void sendMsg(String content) &#123; CorrelationData correlationId = new CorrelationData(UUID.randomUUID().toString()); rabbitTemplate.convertAndSend(EXCHANGE_C, &quot;red.cc.dd&quot;, content, correlationId); &#125; 这样路由键是 red.. ，发送消息的路由键是 “red.cc.dd” ，并且因为是Topic Exchange模式，所以该路由键是可以匹配到的。 完整代码请参考：https://github.com/zhuanzhiBUG/springboot-rabbitmq.git 部分参考内容：https://blog.csdn.net/y4x5M0nivSrJaY3X92c/article/details/80416996]]></content>
      <tags>
        <tag>RabbitMq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 乐观锁 和悲观锁]]></title>
    <url>%2F2019%2F09%2F10%2FMysql-%E4%B9%90%E8%A7%82%E9%94%81-%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%2F</url>
    <content type="text"><![CDATA[date: 2019-09-10 18:43:00&emsp;平时看博客或技术文章的时候，经常被各种锁搞得晕晕乎乎，包括在 自旋锁、可重入锁、公平锁等等 、乐观锁、悲观锁、行锁、表锁、意向锁、排它锁等。前段时间终于把Java多线程相关的锁有机会学习了一遍。现在开始整理mysql相关的锁概念。先从乐观锁和悲观锁开始聊聊。&emsp; 首先要知道，乐观锁和悲观锁不是真实存在的锁，只是两种抽象概念性的东西，就相当于Java中的接口，只是给出了一个定义，一种思想。可以根据这种思想去实现。 一、悲观锁：1.1基本概念以及用法&emsp; 悲观锁是数据库层面实现的锁机制，他是指其他线程对本数据的修改是持有保守态度。&emsp; 在对数据操作前，首先要获取锁，保证其他在修改期间，其他线程对数据不能进行修改。&emsp; java 中的Synsynchronized 就是悲观锁思想的一种体现。mysql中，悲观锁的实现方式是： 12使用语句select * ...... forupdate &emsp; 如果能正确获取锁，那么其他线程要对于这条数据做修改，必须等待这个事务提交释放锁之后，才会执行。下面举个栗子：&emsp; 创建一张表，并开两个查询窗口。都关闭自动提交。 12345678910建表语句：DROP TABLE IF EXISTS `lock_demo`;CREATE TABLE `lock_demo` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `count` int(11) DEFAULT NULL, `version` int(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;INSERT INTO `lock_demo` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;0&apos;); 窗口1，加锁 1234//查询窗口1set autocommit = 0; SELECT * from lock_demo where id = 1 for update; &emsp; 窗口2 ,关闭自动提交，进行数据查询,可以查询出数据，表明悲观锁对于其他线程数据查询是不受影响的 12set autocommit = 0; SELECT * from lock_demo where id = 1 &emsp;当窗口 2 进行加锁或更新的时候，那么就会报错，因为一直获取不到锁，就会提示超时。 123456789//另一个线程进行加锁SELECT * from lock_demo where id = 1 for update;//另一个线程更新update lock_demo set version = 2 WHERE id = 1;错误提示信息：[Err] 1205 - Lock wait timeout exceeded; try restarting transaction当前线程提交事务后，其他线程才能进行更新。 1.2悲观锁的两种模式这里引出了悲观锁涉及到的另外两个锁概念，它们就是共享锁与排它锁。 共享锁和排它锁是悲观锁的不同的实现，它俩都属于悲观锁的范畴。 共享锁顾名思义，共享指的是不同事务对同一个数据可以共享一把锁，也就是说不同事务都可以通过加共享锁或者不加锁的读取读数据。 但是其他事物不能对改行数据加排他锁。参考排它锁的定义。 12语法： select * from table lock in share mode 排他锁，是指对条数据加排它锁后，其他事务就不能对当前数据加锁，包括共享锁和排它锁都不可以。 12语法：select * from table for update innodb 存储在执行修改、删除的时候，都是会默认增加排它锁。 在查询的时候，是不加任何锁的，注意不是加了共享锁，是不加任何锁的。所以才会有在第一个事务中加排它锁的时候，第二个事物依旧可以通过 select * …… 的方式查询。 但是不能再加锁，共享锁和排它锁都不行，也就是执行 select * from table for update select * from table lock in share mode 都不行，也就是执行update 和delete 操作都是不行的。 那么插入数据是是否受影响呢，答案是肯定不受影响。 首先，共享锁和排它锁的粒度是行，也就是针对一行数据。例如你再id = 1的数据上加了排他锁，那么id = 2的数据依旧可以更新删除，更不用说去新增一条数据了。 二. 乐观锁 乐观锁表示对数据的更新持有乐观态度，表示不会造成冲突，所以一般是先进行业务处理，在对数据更新的时候再去判定是否有冲突。 乐观锁是用户自己实现的，不是数据库层面的锁。 原理就是： 在表字段中加一个version 字段。每次更新的时候去检查当前查询的数据中的version 与数据库中的version是否相同，如果不同则不进行更新，相同则进行更新，然后将version 加1 类似的可以使时间戳实现相同的功能。 三. 总结3.1 实现方式悲观锁是数据库级别实现的，直接使用 1select * ..... for update 就表示对当前数据加锁。 乐观锁是需要自己实现，一般是通过版本控制或者加时间戳等方式实现。 3.2 适用场景乐观锁在不发生取锁失败的情况下开销比悲观锁小，但是一旦发生失败回滚开销则比较大，因此适合用在取锁失败概率比较小的场景，可以提升系统并发性能 乐观锁还适用于一些比较特殊的场景，例如在业务操作过程中无法和数据库保持连接等悲观锁无法适用的地方 参考文章：https://www.cnblogs.com/cyhbyw/p/8869855.html]]></content>
      <categories>
        <category>mysql</category>
        <category>锁</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
